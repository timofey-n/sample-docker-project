## INSTALL DOCKER AND DOCKER COMPOSE:
# @link https://docs.docker.com/install/linux/docker-ce/ubuntu/
# @link https://docs.docker.com/compose/install/

# To run this config file with docker-compose, execute: "docker-compose --compatibility up"
# You can specify a -d flag to run as a daemon and --build flag for build.
# "Use docker-compose stop" to stop all services and "docker-compose down -v" to delete all volumes.
# TODO: more customizations such as services for executing unit-tests, ability to modify php.ini files and so on.
# TODO: investigate how we can merge .env variables to other variable (currently working very strange)
# TODO: investigate how we can use different dev/prod environments.
version: '3.1'

services:
    # this server configures php-fpm container before fpm service starts.
    # Also, there is Dockerfile in project root, which contains instructions for image build.
    # Modify Dockerfile if you want to: change original image, install missing packages or php extensions.
    config-app:
        # do not use pre-built image, build image using .Dockerfile instead.
        build:
            context: .
            dockerfile: Dockerfile
        # create new image "app" to be able to use it in other services.
        image: app
        volumes:
            - ./:/app
            - apk_cache:/var/cache/apk
        # this commands will be executed on each container start.
        command: >
            /bin/sh -c "
                cd /app &&
                composer install &&
                php /app/bin/console cache:clear &&
                php /app/bin/console doctrine:migrations:migrate --allow-no-migration --no-interaction
            "
        depends_on:
            - mysql
        env_file:
            - ./.env
    php-fpm:
        # Use previously created image.
        image: app
        container_name: php-fpm
        volumes:
            - ./:/app
            - ./docker/php/www.conf:/usr/local/etc/php-fpm.d/www.conf
        restart: always
        # Note: override it in production compose.
        # Running from a specific user is needed only for development to avoid well known problem with rights.
        # You need to change it to user uid and gid or find more clean solution.
        user: 1000:1000
        depends_on:
            - config-app
        env_file:
            - ./.env

    # Mysql configuration is in .env file.
    # TODO: mount some real directory or schedule periodic database backups in cron.
    mysql:
        container_name: mysql
        image: mysql:5.7
        volumes:
            - database:/var/lib/mysql
        restart: on-failure
        ports:
            # Note. This port only needed if you're planning to access mysql server from internet,
            # Which is usually not needed.
            - 3307:3306
        env_file:
          - ./.env

    # Web server service. You can use it directly or proxy connections from your main web server to this service.
    nginx:
        container_name: nginx
        image: nginx:alpine
        volumes:
            - ./:/app
            - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
            - ./docker/nginx/conf.d:/etc/nginx/conf.d
            - ./docker/log:/var/log
        #ports:
            # Instead of port forwarding, prefer proxying from/to your original web server or access internal ip directly.
            # 1. Get ip of container with whis command:
            # docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' nginx_container_id_or_name
            # 2. Proxy from your original web server to container: https://serveradmin.ru/nginx-proxy_pass/
            #- 8080:80
        restart: always
        depends_on:
            - php-fpm
            - mysql

volumes:
    # internal docker volume (note: to delete all volumes you need to execute this command: docker-compose down -v)
    database:
    apk_cache: